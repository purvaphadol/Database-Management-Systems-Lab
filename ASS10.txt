"
Assignment 10

Implement the following MongoDb Query
1. Create a collection named books.
2. Insert 5 records with field TITLE, DESCRIPTION, BY, URL, TAGS AND   LIKES
3. Insert 1 more document in collection with additional field of user name and comments.
4. Display all the documents whose title is 'mongodb'.
5. Display all the documents written by 'john' or whose title is 'mongodb'.
6. Display all the documents whose title is 'mongodb' and written by 'john'.
7. Display all the documents whose like is greater than 10.
8. Display all the documents whose like is greater than 100 and whose title is either 'mongodb' or written by 'john'.
9. Update the title of 'mongodb' document to 'mongodb overview'
10. Delete the document titled 'nosql overview'.
11. Display exactly two documents written by 'john'.
12. Display the second document published by 'john'.
13. Display all the books in the sorted fashion.
14. Insert a document using save method.

"

Please enter a MongoDB connection string (Default: mongodb://localhost/): mongo
mongo
Current Mongosh Log ID: 655b431beb31511f8ad95149
Connecting to:          mongodb://127.0.0.1:27017/mongo?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.0.2
Using MongoDB:          7.0.3
Using Mongosh:          2.0.2

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2023-11-18T23:53:07.717+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

mongo> show dbs
admin   40.00 KiB
config  84.00 KiB
local   40.00 KiB

mongo> use ass10
switched to db ass10
ass10> db.createCollection("Books")
{ ok: 1 } 

ass10> db.Books.insertMany([ {title:'mongodb',des:'this is the mongodb book',by:'john', url:'www.mondodb.com', tags:['nosql','not only sql'],likes:1000}, {title:'nosql overview',des:'this is the nosql',by:'sam', url:'www.nosql.com', tags:'nosql',likes:100}, {title:'toc',des:'this is the theory of computation',by:'john', url:'www.toc.com', tags:'toc',likes:10}, {title:'cns',des:'computer networks and security',by:'head', url:'www.cns.com', tags:['network','security'],likes:1000}, {title:'maths',des:'this is maths',by:'john', url:'www.maths.com', tags:'arithmetic',likes:10000}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("655b46f9eb31511f8ad9514a"),
    '1': ObjectId("655b46f9eb31511f8ad9514b"),
    '2': ObjectId("655b46f9eb31511f8ad9514c"),
    '3': ObjectId("655b46f9eb31511f8ad9514d"),
    '4': ObjectId("655b46f9eb31511f8ad9514e")
  }
}

ass10> db.Books.insertOne({title:'dsa',des:'this id data structure and algorithm',by:'varsha',url:'ww.dsa.com', tags:'dsa',likes:100,username:'nik',comments:'no comments'})
{
  acknowledged: true,
  insertedId: ObjectId("655b4882eb31511f8ad9514f")
}

ass10> db.Books.find({title:'mongodb'})
[
  {
    _id: ObjectId("655b46f9eb31511f8ad9514a"),
    title: 'mongodb',
    des: 'this is the mongodb book',
    by: 'john',
    url: 'www.mondodb.com',
    tags: [ 'nosql', 'not only sql' ],
    likes: 1000
  }
]

ass10> db.Books.find({$or:[{title:'mongodb'},{by:'john'}]})
[
  {
    _id: ObjectId("655b46f9eb31511f8ad9514a"),
    title: 'mongodb',
    des: 'this is the mongodb book',
    by: 'john',
    url: 'www.mondodb.com',
    tags: [ 'nosql', 'not only sql' ],
    likes: 1000
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514c"),
    title: 'toc',
    des: 'this is the theory of computation',
    by: 'john',
    url: 'www.toc.com',
    tags: 'toc',
    likes: 10
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514e"),
    title: 'maths',
    des: 'this is maths',
    by: 'john',
    url: 'www.maths.com',
    tags: 'arithmetic',
    likes: 10000
  }
]

ass10> db.Books.find({likes:{$gt:10}})
[
  {
    _id: ObjectId("655b46f9eb31511f8ad9514a"),
    title: 'mongodb',
    des: 'this is the mongodb book',
    by: 'john',
    url: 'www.mondodb.com',
    tags: [ 'nosql', 'not only sql' ],
    likes: 1000
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514b"),
    title: 'nosql overview',
    des: 'this is the nosql',
    by: 'sam',
    url: 'www.nosql.com',
    tags: 'nosql',
    likes: 100
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514d"),
    title: 'cns',
    des: 'computer networks and security',
    by: 'head',
    url: 'www.cns.com',
    tags: [ 'network', 'security' ],
    likes: 1000
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514e"),
    title: 'maths',
    des: 'this is maths',
    by: 'john',
    url: 'www.maths.com',
    tags: 'arithmetic',
    likes: 10000
  },
  {
    _id: ObjectId("655b4882eb31511f8ad9514f"),
    title: 'dsa',
    des: 'this id data structure and algorithm',
    by: 'varsha',
    url: 'ww.dsa.com',
    tags: 'dsa',
    likes: 100,
    username: 'nik',
    comments: 'no comments'
  }
]

ass10> db.Books.find({$and:[{likes:{$gt:10}},{$or:[{title:'mongodb'},{by:'john'}] }]  })
[
  {
    _id: ObjectId("655b46f9eb31511f8ad9514a"),
    title: 'mongodb',
    des: 'this is the mongodb book',
    by: 'john',
    url: 'www.mondodb.com',
    tags: [ 'nosql', 'not only sql' ],
    likes: 1000
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514e"),
    title: 'maths',
    des: 'this is maths',
    by: 'john',
    url: 'www.maths.com',
    tags: 'arithmetic',
    likes: 10000
  }
]

ass10> db.Books.updateOne({title:'mongodb'},{$set:{title:'mongodb overview'}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

ass10> db.Books.deleteOne({title:'nosql overview'})
{ acknowledged: true, deletedCount: 1 }

ass10> db.Books.find({by:"john"}).limit(2)
[
  {
    _id: ObjectId("655b46f9eb31511f8ad9514a"),
    title: 'mongodb overview',
    des: 'this is the mongodb book',
    by: 'john',
    url: 'www.mondodb.com',
    tags: [ 'nosql', 'not only sql' ],
    likes: 1000
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514c"),
    title: 'toc',
    des: 'this is the theory of computation',
    by: 'john',
    url: 'www.toc.com',
    tags: 'toc',
    likes: 10
  }
]

ass10> db.Books.find({by:"john"}).limit(1).skip(1)
[
  {
    _id: ObjectId("655b46f9eb31511f8ad9514c"),
    title: 'toc',
    des: 'this is the theory of computation',
    by: 'john',
    url: 'www.toc.com',
    tags: 'toc',
    likes: 10
  }
]

ass10> db.Books.find().sort({title:1})
[
  {
    _id: ObjectId("655b46f9eb31511f8ad9514d"),
    title: 'cns',
    des: 'computer networks and security',
    by: 'head',
    url: 'www.cns.com',
    tags: [ 'network', 'security' ],
    likes: 1000
  },
  {
    _id: ObjectId("655b4882eb31511f8ad9514f"),
    title: 'dsa',
    des: 'this id data structure and algorithm',
    by: 'varsha',
    url: 'ww.dsa.com',
    tags: 'dsa',
    likes: 100,
    username: 'nik',
    comments: 'no comments'
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514e"),
    title: 'maths',
    des: 'this is maths',
    by: 'john',
    url: 'www.maths.com',
    tags: 'arithmetic',
    likes: 10000
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514a"),
    title: 'mongodb overview',
    des: 'this is the mongodb book',
    by: 'john',
    url: 'www.mondodb.com',
    tags: [ 'nosql', 'not only sql' ],
    likes: 1000
  },
  {
    _id: ObjectId("655b46f9eb31511f8ad9514c"),
    title: 'toc',
    des: 'this is the theory of computation',
    by: 'john',
    url: 'www.toc.com',
    tags: 'toc',
    likes: 10
  }
]


