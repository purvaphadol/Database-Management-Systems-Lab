"
Assignment 12

Create the following schema
Order (id, amount ,status)
Cusid	Amount	Status
A1	400	P
B1	300	D
A1	200	F
C1	200	F
B1	700	P
B1	800	P

Status: P=”Pending”, D= “Delivered”, F= “Failed”
Implement the following using Map Reduce function
1. Find the sum of amount of each customer whose status is P
2. Find the average  amount of each customer
3. Find the min amount of each customer
4. Find the max amount of each customer whose status is F.
"

Please enter a MongoDB connection string (Default: mongodb://localhost/): mongo
mongo
Current Mongosh Log ID: 655ce5946d0aaee1c4d84849
Connecting to:          mongodb://127.0.0.1:27017/mongo?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.0.2
Using MongoDB:          7.0.3
Using Mongosh:          2.0.2
mongosh 2.1.0 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2023-11-18T23:53:07.717+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

mongo> use a12
switched to db a12
a12> db.createCollection("orders")
{ ok: 1 }
a12>  db.orders.insertMany([ {custid:'A1',amt:400 ,status:'P'}, {custid:'B1',amt:300 ,status:'D'}, {custid:'A1',amt:200 ,status:'F'}, {custid:'C1',amt:200 ,status:'F'}, {custid:'B1',amt:700 ,status:'P'}, {custid:'B1',amt:800 ,status:'P'}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("655ce5e76d0aaee1c4d8484a"),
    '1': ObjectId("655ce5e76d0aaee1c4d8484b"),
    '2': ObjectId("655ce5e76d0aaee1c4d8484c"),
    '3': ObjectId("655ce5e76d0aaee1c4d8484d"),
    '4': ObjectId("655ce5e76d0aaee1c4d8484e"),
    '5': ObjectId("655ce5e76d0aaee1c4d8484f")
  }
}
a12> db.orders.find()
[
  {
    _id: ObjectId("655ce5e76d0aaee1c4d8484a"),
    custid: 'A1',
    amt: 400,
    status: 'P'
  },
  {
    _id: ObjectId("655ce5e76d0aaee1c4d8484b"),
    custid: 'B1',
    amt: 300,
    status: 'D'
  },
  {
    _id: ObjectId("655ce5e76d0aaee1c4d8484c"),
    custid: 'A1',
    amt: 200,
    status: 'F'
  },
  {
    _id: ObjectId("655ce5e76d0aaee1c4d8484d"),
    custid: 'C1',
    amt: 200,
    status: 'F'
  },
  {
    _id: ObjectId("655ce5e76d0aaee1c4d8484e"),
    custid: 'B1',
    amt: 700,
    status: 'P'
  },
  {
    _id: ObjectId("655ce5e76d0aaee1c4d8484f"),
    custid: 'B1',
    amt: 800,
    status: 'P'
  }
]

a12> var map=function(){if(this.status==="P"){emit(this.id,this.amt)}}

a12> var reduce=function(key,values){return Array.sum(values)}

a12> db.orders.mapReduce(map,reduce,{out:"order_total"} )
DeprecationWarning: Collection.mapReduce() is deprecated. Use an aggregation instead.
See https://docs.mongodb.com/manual/core/map-reduce for details.
{ result: 'order_total', ok: 1 }

a12> db.order_total.find({})
[ { _id: null, value: 1900 } ]



a12> var map=function(){emit(this.custid,this.amt)}

a12> var reduce=function(key,values){return Array.avg(values)}

a12> db.orders.mapReduce(map,reduce,{out:"order_avg"} )
{ result: 'order_avg', ok: 1 }

a12> db.order_avg.find({})
[
  { _id: 'C1', value: 200 },
  { _id: 'B1', value: 600 },
  { _id: 'A1', value: 300 }
]



a12> var map=function(){emit(this.custid,this.amt)}

a12> var reduce=function(key,values){var min=Math.min.apply(null,values);return min}

a12> db.orders.mapReduce(map,reduce,{out:"order_min"} )
{ result: 'order_min', ok: 1 }
a12> db.order_min.find({})
[
  { _id: 'C1', value: 200 },
  { _id: 'A1', value: 200 },
  { _id: 'B1', value: 300 }
]


a12> var map=function(){if (status==='F'){emit(this.custid,this.amt)}}

a12> var reduce=function(key,values){var max=Math.max.apply(null,values);return max}

a12> db.orders.mapReduce(map,reduce,{out:"order_max"} )
{ result: 'order_min', ok: 1 }

a12> db.order_max.find({})
[ 
  { _id: 'A1', value: 200 }, 
  { _id: 'C1', value: 200 } 
]

